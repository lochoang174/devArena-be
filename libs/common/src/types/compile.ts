// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v3.20.3
// source: proto/compile.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";
import { Empty } from "../../../../google/protobuf/empty";

export const protobufPackage = "compile";

export interface Compile {
  /** Mã nguồn để kiểm tra */
  code: string;
  /** Danh sách các testcase */
  testcases: TestCase[];
}

export interface TestCase {
  /** Mảng các input của testcase */
  inputs: string[];
}

export const COMPILE_PACKAGE_NAME = "compile";

export interface CompileServiceClient {
  /** Hàm xử lý compile code với danh sách testcase */

  testCompile(request: Compile): Observable<Empty>;
}

export interface CompileServiceController {
  /** Hàm xử lý compile code với danh sách testcase */

  testCompile(request: Compile): void;
}

export function CompileServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["testCompile"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("CompileService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("CompileService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const COMPILE_SERVICE_NAME = "CompileService";
